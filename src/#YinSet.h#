#ifndef YINSET_H
#define YINSET_H
#include <fstream>
#include <iomanip>
#include <sstream>
#include "Core/Interval.h"
#include "Core/Tensor.h"
#include "GluingCompactSurface.h"
#include "Locate.h"
#include "Past.h"
#include "Point.h"
#include "PointCompare.h"
#include "PrePast.h"
#include "ReFactoryBoundary.h"
#include "RemoveOverlap.h"
#include "SegmentCompare.h"
#include "TriangleIntersection.h"
#include "Triangulation.h"
// #ifdef _UsBoost
// #include <boost/timer.hpp>
// #endif  // _UsBoost
// #ifdef _bottleneck_
// #include <boost/timer.hpp>
// #endif  // _bottleneck_

namespace YSB {
/// A node in the Hasse diagram.
struct Node {
  int depth;  // even number for positive orientation, odd number of negative
              // orientation
  int parent;
  std::vector<int> children;
};

template <class T>
class YinSet {
 private:
  std::vector<GluingCompactSurface<T>> vecFace;
  std::vector<Node> diagram;
  int bettiNumbers[2];

 public:
  YinSet(){};

  explicit YinSet(const std::vector<GluingCompactSurface<T>>& vf,
                  int m = 1,
                  Real tol = TOL)
      : vecFace(vf) {
    // ensureFace(tol, 1);
    if (vecFace.size() > 0 && m != 0)
      buildHasse(tol);
  }
  // import data from obj file.
  explicit YinSet(const std::string& s, int Clip = 0, Real tol = TOL);

  // sort Triangle in GluingCompactSurfaces by TriangleCompare.
  void sort(int i = 1, Real tol = TOL);

  // minimize tol
  void minimize(Real tol);

  // Boolean operator.
  // usingRFB determine whether Clip connect boundary to GluingCompactSurfaces.
  YinSet<T> complement(const int usingRFB = 1, Real tol = TOL) const;

  YinSet<T> meet(const YinSet<T>& y2,
                 const int usingRFB = 1,
                 Real tol = TOL) const;

  YinSet<T> join(YinSet<T>& y2, const int usingRFB = 1, Real tol = TOL) const {
      Real t[2] = {tol, tol};
      if(tol > TOL){
          t[0] = TOL;
      }
    auto comp1 = complement(usingRFB, tol);
    auto comp2 = y2.complement(usingRFB, tol);
    auto comp3 = comp1.meet(comp2, usingRFB, tol);
    return comp3.complement(usingRFB, tol);
  }

  /// Return if the Yin set is bounded, based on the Hasse diagram.
  int isBounded() const { return diagram.back().depth == -1; }

  /// Get the orientation of the k-th Jordan curve, based on the Hasse diagram.
  int getOrientation(int k) const {
    return (diagram[k].depth % 2 == 0) ? (1) : (-1);
  }

  /// Return the Betti numbers.
  int getBettiNumber(int rank) const { return bettiNumbers[rank]; }

  /// Return a tabular version of the Hasse diagram.
  std::string getHasseString() const;

  std::vector<GluingCompactSurface<T>>& gcss() { return vecFace; }
  const std::vector<GluingCompactSurface<T>>& gcss() const { return vecFace; }

  // Get Triangle set.
  void collapse(std::vector<Triangle<T, 3>>& rs,
                int idYinset,
                Real tol = TOL) const;

  // Ensure YinSet boundary is right.
  void ensureFace(Real tol = TOL, int m = 0);

  // calculate HasseMap between GluingCompactSurface.
  void buildHasse(Real tol);

  void objOutput(std::string s,
                 std::string folder = "./",
                 int prec = -std::log10(TOL) + 2) {
    exportdata_inner(s, *this, folder, prec);
  }

  void ClipGCS(Real tol = TOL, const int usingRFB = 1);
};

YinSet<Real> objInput(const std::string& s, Real tol);
void exportdata_inner(std::string s, YinSet<Real>& y, std::string folder);

template <>
inline YinSet<Real>::YinSet(const std::string& s, int Clip, Real tol)
    : YinSet<Real>(objInput(s, tol)) {
  if (vecFace.size() > 0) {
    if (Clip == 2)
      ensureFace(tol, 1);
    else if (Clip == 1)
      ClipGCS(tol);
    buildHasse(tol);
  }
}

/// Return a tabular version of the Hasse diagram.
template <class T>
inline std::string YinSet<T>::getHasseString() const {
  assert(!vecFace.empty());
  const int w = 8;
  std::ostringstream oss;
  oss << std::left << std::setw(w) << " ";
  oss << std::left << std::setw(w) << "Parent";
  oss << std::left << std::setw(w) << "Depth";
  oss << std::left << std::setw(w) << "Orient";
  oss << std::left << "Children"
      << "\n";

  for (std::size_t i = 0; i < diagram.size(); ++i) {
    oss << std::left << std::setw(w) << i;
    oss << std::left << std::setw(w) << diagram[i].parent;
    oss << std::left << std::setw(w) << diagram[i].depth;
    if (i < vecFace.size()) {
      oss << std::left << std::setw(w) << getOrientation(i);
    } else {
      oss << std::left << std::setw(w) << " ";
    }
    oss << "{";
    const std::vector<int>& children = diagram[i].children;
    for (int j : children)
      oss << j << ",";
    oss << "}"
        << "\n";
  }
  return oss.str();
}

template <class T>
inline void YinSet<T>::collapse(std::vector<Triangle<T, 3>>& rs,
                                int idYinset,
                                Real tol) const {
  SegmentCompare segcmp(tol);

  int idFace = 0;
  for (auto&& iFace : vecFace) {
    iFace.collapse(rs, idYinset, idFace);
    ++idFace;
  }
}

template <class T>
inline void YinSet<T>::ensureFace(Real tol, int m) {
  std::vector<Triangle<T, 3>> inputA;
  collapse(inputA, 1, tol);
  int size = inputA.size();
  SegmentCompare segCmp(tol);
  TriangleCompare triCmp(tol, 1);
  std::map<Segment<T, 3>, std::set<int>, SegmentCompare> allSegI(segCmp);
  std::map<Segment<T, 3>, std::set<Triangle<T, 3>, TriangleCompare>,
           SegmentCompare>
      allSegT(segCmp);

  for (auto i = 0; i < size; ++i) {
    auto tri = inputA[i];
    tri.id() = i;
    for (int ie = 0; ie < 3; ++ie) {
      auto itT = allSegT.insert(
          {tri.ed(ie), std::set<Triangle<T, 3>, TriangleCompare>(triCmp)});
      auto rT = itT.first->second.insert(tri);

      if (rT.second != false) {
        auto itI = allSegI.insert({tri.ed(ie), std::set<int>()});
        itI.first->second.insert(i);
      }
    }
  }

  if (m == 1) {
    std::map<Segment<T, 3>, std::set<int>, SegmentCompare> segs(allSegI);
    while (!segs.empty()) {
      auto i = segs.begin();
      auto itI = allSegI.find(i->first);
      if (itI->second.size() == 1) {
        int id = *(itI->second.begin());
        auto tri = inputA[id];
        typename std::map<Segment<T, 3>, std::set<int>,
                          SegmentCompare>::iterator iteI[3];
        typename std::map<Segment<T, 3>,
                          std::set<Triangle<T, 3>, TriangleCompare>,
                          SegmentCompare>::iterator iteT[3];
        for (int ie = 0; ie < 3; ++ie) {
          auto edge = tri.ed(ie);

          iteI[ie] = allSegI.find(edge);
          itI = segs.find(edge);
          if (iteI[ie]->second.size() == 1) {
            allSegI.erase(iteI[ie]);
          } else {
            iteI[ie]->second.erase(id);
            segs.insert({edge, std::set<int>()});
          }

          iteT[ie] = allSegT.find(edge);
          if (iteT[ie]->second.size() == 1)
            allSegT.erase(iteT[ie]);
          else
            iteT[ie]->second.erase(tri);
        }
      }
      segs.erase(i);
    }
  }

  std::set<Triangle<T, 3>, TriangleCompare> allTris(triCmp);
  std::vector<Triangle<T, 3>> gcs;

  for (auto&& itI : allSegI) {
    auto itT = allSegT.find(itI.first);
    assert(itT != allSegT.end() && "itl not in allSegT.");
    assert(itI.second.size() == itT->second.size() &&
           "itI, itT second size not equal.");
    assert(itT->second.size() >= 2 &&
           "edge not contained in more than one Triangle.");
    assert(itI.second.size() >= 2 &&
           "edge not contained in more than one Triangle.");

    allTris.insert(itT->second.begin(), itT->second.end());
  }

  for (auto&& tri : allTris) {
    int id = tri.id();
    for (int ie = 0; ie < 3; ++ie) {
      auto edge = tri.ed(ie);
      auto it = allSegI.find(edge);
      assert(it != allSegI.end() && "edge in allSegI.");
      auto itId = it->second.find(id);
      assert(itId != it->second.end() && "tri.id in allSegI[edge].");

      auto itT = allSegT.find(edge);
      assert(itT != allSegT.end() && "edge in allSegT.");
      auto itTId = itT->second.find(tri);
      assert(itTId != itT->second.end() && "tri in allSegT[edge].");
    }
  }

  gcs.insert(gcs.end(), allTris.begin(), allTris.end());
  vecFace.clear();
  vecFace.resize(1);
  std::swap(vecFace[0].tris(), gcs);

  ClipGCS(tol);

  // assert(false && "ensureFace Pass.");
}

template <class T>
inline void YinSet<T>::ClipGCS(Real tol, const int usingRFB) {
  TriangleIntersection<T> intersectOp;
  std::vector<Triangle<T, 3>> inputA, inputB;

  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "ClipGCS::collapse cpu time : ";
    // #endif  // _UsBoost

    collapse(inputA, 1, tol);
  }

  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "ClipGCS::TriangleIntersection cpu time :
    //     ";
    // #endif  // _UsBoost

    // #ifdef _bottleneck_
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "ClipGCS::TriangleIntersection cpu time :
    //     ";
    // #endif  //  _bottleneck_

    intersectOp(inputA, inputB, tol);
  }

  // Triangulation
  Triangulation<T> triangulateOp;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "ClipGCS::Triangulation cpu time : ";
    // #endif  // _UsBoost

    triangulateOp(inputA, inputB, intersectOp.resultA, intersectOp.resultB,
                  tol);
  }

  // PrePast
  PrePast<T> prePastOp;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "ClipGCS::prePast cpu time : ";
    // #endif  // _UsBoost

    prePastOp(triangulateOp.vecTriA, tol);
  }

  if (usingRFB == 1) {
    ReFactoryBoundary<T> reFactoryBoundaryOp;
    {
      // #ifdef _UsBoost
      //       boost::timer::auto_cpu_timer t;
      //       std::cout << std::endl << "ClipGCS::reFactoryBoundary cpu time :
      //       ";
      // #endif  // _UsBoost
      reFactoryBoundaryOp(triangulateOp.vecTriA, triangulateOp.vecTriB,
                          prePastOp.vecSPA, prePastOp.vecSPB,
                          prePastOp.ClipFaces, tol);
    }
  }

  // Locate SurfacePatch.

  // Past SurfacePatch to GluingCompactSurface.
  Past<T> pastOp;
  std::vector<SurfacePatch<T>> vecF;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "ClipGCS::Past cpu time : ";
    // #endif  // _UsBoost

    pastOp.combine(prePastOp.vecSPA, prePastOp.vecSPB, triangulateOp.vecTriA,
                   triangulateOp.vecTriB, vecF);
    pastOp(vecF, triangulateOp.vecTriA, triangulateOp.vecTriB, tol);
  }

  // Yinset Constructor
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "ClipGCS::YinSet() cpu time : ";
    // #endif  // _UsBoost

    vecFace = pastOp.vecGCS;
  }
}

template <class T>
inline YinSet<T> YinSet<T>::complement(const int usingRFB, Real tol) const {
  TriangleIntersection<T> intersectOp;
  std::vector<Triangle<T, 3>> inputA, inputB;

  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "complement::collapse cpu time : ";
    // #endif  // _UsBoost

    collapse(inputA, 1, tol);
  }

  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "complement::TriangleIntersection cpu time
    //     : ";
    // #endif  // _UsBoost

    // #ifdef _bottleneck_
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "complement::TriangleIntersection cpu time
    //     : ";
    // #endif  //  _bottleneck_

    intersectOp(inputA, inputB, tol);
  }

  // Triangulation
  Triangulation<T> triangulateOp;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "complement::Triangulation cpu time : ";
    // #endif  // _UsBoost

    triangulateOp(inputA, inputB, intersectOp.resultA, intersectOp.resultB,
                  tol);
  }

  // PrePast
  PrePast<T> prePastOp;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "complement::prePast cpu time : ";
    // #endif  // _UsBoost

    prePastOp(triangulateOp.vecTriA, tol);
  }

  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "complement::reverse cpu time : ";
    // #endif  // _UsBoost

    for (auto&& tri : triangulateOp.vecTriA) {
      tri.reverse();
    }
  }

  if (usingRFB == 1) {
    ReFactoryBoundary<T> reFactoryBoundaryOp;
    {
      // #ifdef _UsBoost
      //       boost::timer::auto_cpu_timer t;
      //       std::cout << std::endl << "complement::reFactoryBoundary cpu time
      //       : ";
      // #endif  // _UsBoost
      reFactoryBoundaryOp(triangulateOp.vecTriA, triangulateOp.vecTriB,
                          prePastOp.vecSPA, prePastOp.vecSPB,
                          prePastOp.ClipFaces, tol);
    }
  }

  // Locate SurfacePatch.

  // Past SurfacePatch to GluingCompactSurface.
  Past<T> pastOp;
  std::vector<SurfacePatch<T>> vecF;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "complement::Past cpu time : ";
    // #endif  // _UsBoost

    pastOp.combine(prePastOp.vecSPA, prePastOp.vecSPB, triangulateOp.vecTriA,
                   triangulateOp.vecTriB, vecF);
    pastOp(vecF, triangulateOp.vecTriA, triangulateOp.vecTriB, tol);
  }

  // Yinset Constructor
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "complement::YinSet() cpu time : ";
    // #endif  // _UsBoost

    return YinSet<T>(pastOp.vecGCS, 1, tol);
  }
}

template <class T>
inline YinSet<T> YinSet<T>::meet(const YinSet<T>& y2,
                                 const int usingRFB,
                                 Real tol) const {
  // Intersection Triangle.
  TriangleIntersection<T> intersectOp;
  std::vector<Triangle<T, 3>> inputA, inputB;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "meet::collapse cpu time : ";
    // #endif  // _UsBoost

    collapse(inputA, 1, tol);
    y2.collapse(inputB, 2, tol);

    if (tol > TOL) {
      auto tris = inputA;
      int s = inputA.size();
      tris.insert(tris.end(), inputB.begin(), inputB.end());
      combine(tris, tol);
      inputA.clear();
      inputB.clear();
      inputA.insert(inputA.end(), tris.begin(), tris.begin() + s);
      inputB.insert(inputB.end(), tris.begin() + s, tris.end());
      tol = TOL;
    }
  }

  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "meet::intersect cpu time : ";
    // #endif  // _UsBoost

    // #ifdef _bottleneck_
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "meet::TriangleIntersection cpu time : ";
    // #endif  //  _bottleneck_

    intersectOp(inputA, inputB, tol);
  }

  // Triangulation
  Triangulation<T> triangulateOp;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "meet::triangulate cpu time : ";
    // #endif  // _UsBoost

    triangulateOp(inputA, inputB, intersectOp.resultA, intersectOp.resultB,
                  tol);
  }

  // RemoveOverlap
  RemoveOverlap<T> removeOverlapOp;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "meet::removeOverlap cpu time : ";
    // #endif  // _UsBoost

    removeOverlapOp(triangulateOp.TriangulateA, triangulateOp.TriangulateB,
                    triangulateOp.vecTriA, triangulateOp.vecTriB,
                    intersectOp.resultA, intersectOp.resultB, tol);
  }

  // PrePast
  PrePast<T> prePastOp;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "meet::prePast cpu time : ";
    // #endif  // _UsBoost

    prePastOp(triangulateOp.vecTriA, triangulateOp.vecTriB, tol);
  }

  if (usingRFB == 1) {
    ReFactoryBoundary<T> reFactoryBoundaryOp;
    {
      // #ifdef _UsBoost
      //       boost::timer::auto_cpu_timer t;
      //       std::cout << std::endl << "meet::reFactoryBoundary cpu time : ";
      // #endif  // _UsBoost
      reFactoryBoundaryOp(triangulateOp.vecTriA, triangulateOp.vecTriB,
                          prePastOp.vecSPA, prePastOp.vecSPB,
                          prePastOp.ClipFaces, tol);
    }
  }

  // Locate SurfacePatch.
  Locate<T> locateOp;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "meet::locate cpu time : ";
    // #endif  // _UsBoost

    locateOp(inputA, inputB, isBounded(), y2.isBounded(), triangulateOp.vecTriA,
             triangulateOp.vecTriB, prePastOp.vecSPA, prePastOp.vecSPB, tol);
  }

  // Past SurfacePatch to GluingCompactSurface.
  Past<T> pastOp;
  std::vector<SurfacePatch<T>> vecF;
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "meet::Past cpu time : ";
    // #endif  // _UsBoost

    pastOp.combine(prePastOp.vecSPA, prePastOp.vecSPB, triangulateOp.vecTriA,
                   triangulateOp.vecTriB, vecF);
    pastOp(vecF, triangulateOp.vecTriA, triangulateOp.vecTriB, tol);
  }

  // Yinset Constructor
  {
    // #ifdef _UsBoost
    //     boost::timer::auto_cpu_timer t;
    //     std::cout << std::endl << "meet::YinSet() cpu time : ";
    // #endif  // _UsBoost

    return YinSet<T>(pastOp.vecGCS, 1, tol);
  }
}

template <class T>
inline void YinSet<T>::buildHasse(Real tol) {
  // step 1 : construct the inclusion matrix
  const int numFaces = vecFace.size();
  Tensor<int, 2> mat(
      Box<2>(Vec<int, 2>(0), Vec<int, 2>{numFaces, numFaces} - 1));
  mat = 0;
  std::vector<Vec<Real, 3>> somePoints(numFaces);
  std::vector<Interval<3>> boxes(numFaces);
  std::vector<bool> boundedness(numFaces);
  std::vector<std::vector<int>> candidates(numFaces);
  Real co[3] = {1 / 3.0, 1 / 3.0, 1 / 3.0};
  Point<Real, 3> zero(0.0);
  for (int i = 0; i < numFaces; ++i) {
    somePoints[i] = vecFace[i].tris()[0].barycentric(co) - zero;
    boxes[i] = boundingBox(vecFace[i].tris());
    boundedness[i] = (vecFace[i].Type() == FacType::Inner);
  }
  for (int i = 0; i < numFaces - 1; ++i) {
    for (int j = i + 1; j < numFaces; ++j) {
      if (boxes[i].contain(boxes[j], tol))
        candidates[i].push_back(j);
      if (boxes[j].contain(boxes[i], tol))
        candidates[j].push_back(i);
    }
  }
  //
  Locate<T> locater;
  for (int i = 0; i < numFaces; ++i) {
    std::vector<Point<Real, 3>> queries;
    for (int k : candidates[i])
      queries.push_back(zero + somePoints[k]);
    auto loc = locater(vecFace[i].tris(), queries, boundedness[i]);
    for (std::size_t j = 0; j < candidates[i].size(); ++j) {
      assert(loc[j] != 0);
      if (boundedness[i] == (loc[j] == 1)) {
        mat(i, candidates[i][j]) = 1;
        mat(candidates[i][j], i) = -1;
      }
    }
  }
  // step 2 : obtain the Hasse diagram from the inclusion matrix
  diagram.clear();
  diagram.resize(numFaces + 1);
  diagram[numFaces].depth = -2;
  diagram[numFaces].parent = -1;
  std::vector<int> numAnc(numFaces);  // number of ancestors
  std::vector<int> parent(numFaces);
  for (int i = 0; i < numFaces; ++i) {
    numAnc[i] = std::count(&mat(0, i), &mat(0, i + 1), 1);
    if (numAnc[i] == 0) {
      parent[i] = numFaces;
      diagram[numFaces].depth = (boundedness[i]) ? (-1) : (0);
    }
  }
  assert(diagram[numFaces].depth != -2);
  // topological sort
  int numRemain = numFaces;
  int numPositive = 0;
  while (numRemain--) {
    int j = std::find(numAnc.cbegin(), numAnc.cend(), 0) - numAnc.cbegin();
    numAnc[j] = -1;  // so that j will never be selected again
    diagram[j].parent = parent[j];
    diagram[j].depth = diagram[parent[j]].depth + 1;
    if (diagram[j].depth % 2 == 0)
      ++numPositive;
    diagram[parent[j]].children.push_back(j);
    // handle the children
    for (int k = 0; k < numFaces; ++k) {
      if (mat(j, k) == 1) {
        parent[k] = j;
        --numAnc[k];
      }
    }
  }
  // step 3 : calculate the Betti nubmers.
  if (diagram[numFaces].depth == -1) {
    // this Yin set is bounded.
    bettiNumbers[0] = numPositive;
    bettiNumbers[1] = numFaces - numPositive;
  } else {
    // this Yin set is unbounded.
    bettiNumbers[0] = numPositive + 1;
    bettiNumbers[1] = numFaces - numPositive;
  }
}

template <class T>
void YinSet<T>::sort(int i, Real tol) {
  for (auto&& GCS : vecFace) {
    GCS.sort(i, tol);
  }
}

template <class T>
void YinSet<T>::minimize(Real tol) {
  if (tol <= TOL)
    return;

  for (auto&& GCS : vecFace) {
    GCS.minimize(tol);
  }
}

}  // namespace YSB

#endif  // !YINSET_H