#include "catch.hpp"
#include "../src/Triangle.h"
#include <vector>

using namespace YSB;


TEST_CASE("Triangle locate","[tl1]"){
  Real r1[3] = {1.0, 1.0, 0.0}, r2[3] = {0.0, 0.0, 0.0}, r3[3] = {2.0, -2.4, 0.0}, r4[3] = {1.0, 1.0, 0.0}, r5[3] = {0.5, 0.5, 0.0}, r6[3] = {1.0, 0.0, 0.0}, r7[3] = {10.0, 1.0, 0.0} ;
  Point<Real, 3> tp1(r1), tp2(r2), tp3(r3), p1(r4), p2(r5), p3(r6), p4(r7);
  Point<Real, 3> tripoints[] = {tp1, tp2, tp3};
  Triangle<Real, 3> tri(tripoints);
  REQUIRE(tri.locate(p1) == Triangle<Real, 3>::locType::InVertex);
  REQUIRE(tri.locate(p2) == Triangle<Real, 3>::locType::InEdge);
  REQUIRE(tri.locate(p3) == Triangle<Real, 3>::locType::Inter);
  REQUIRE(tri.locate(p4) == Triangle<Real, 3>::locType::Outer); 
}


TEST_CASE("3d Triangle intersect line","[til1]"){
  Real r1[3] = {1.0, 1.0, 0.0}, r2[3] = {0.0, 0.0, 0.0}, r3[3] = {2.0, -2.4, 0.0}, r4[3] = {1.0, 1.0, 0.0}, r5[3] = {999.5, 99.5, 1.0}, r6[3] = {1.0, 100.0, 0.0}, r7[3] = {999.5, 99.5, 1.0}, r8[3] = {1.0, 1.0, 0.0}, r9[3] = {-0.5, 1.0, 0.0}, r10[3] = {0.4, 0.0, 0.0}, r11[3] = {2.0, 2.0, 0.0} , r12[3] = {10.0, 10.0, 0.0}, r13[3] = {0.0, 1.5, 0.0};
  Point<Real, 3> tp1(r1), tp2(r2), tp3(r3), p1(r4), p2(r6), p3(r8), p4(r10), p5(r12);
  Vec<Real, 3> d1(r5), d2(r7), d3(r9), d4(r11), d5(r13);
  Point<Real, 3> tripoints[] = {tp1, tp2, tp3};
  Triangle<Real, 3> tri(tripoints);
  Line<Real, 3> l1(p1, d1), l2(p2, d2), l3(p3, d3), l4(p4, d4), l5(p5, d5);
  std::vector<Point<Real, 3>> re1, re2, re3, re4, re5;
  REQUIRE(tri.intersect(l1, re1) == 1); 
  REQUIRE(tri.intersect(l2, re2) == 0); 
  REQUIRE(tri.intersect(l3, re3) == 1);
  REQUIRE(tri.intersect(l4, re4) == 2);
  REQUIRE(tri.intersect(l5, re5) == 0);
}
  
  
TEST_CASE("2d Triangle intersect line","[til2]"){
  Real r1[2] = {1.0, 1.0}, r2[2] = {0.0, 0.0}, r3[2] = {2.0, -2.4}, r8[2] = {1.0, 1.0}, r9[2] = {-0.5, 1.0}, r10[2] = {0.4, 0.0}, r11[2] = {2.0, 2.0} , r12[2] = {10.0, 10.0}, r13[2] = {0.0, 1.5};
  Point<Real, 2> tp1(r1), tp2(r2), tp3(r3), p3(r8), p4(r10), p5(r12);
  Vec<Real, 2> d3(r9), d4(r11), d5(r13);
  Point<Real, 2> tripoints[] = {tp1, tp2, tp3};
  Triangle<Real, 2> tri(tripoints);
  Line<Real, 2> l3(p3, d3), l4(p4, d4), l5(p5, d5);
  std::vector<Point<Real, 2>> re3, re4, re5;
  REQUIRE(tri.intersect(l3, re3) == 1);
  REQUIRE(tri.intersect(l4, re4) == 2);
  REQUIRE(tri.intersect(l5, re5) == 0);
}
 

TEST_CASE("3d Triangle intersect triangle  ","[tit1]"){
  Real r1[3] = {1.0, 1.0, 0.0}, r2[3] = {0.0, 0.0, 0.0}, r3[3] = {2.0, -2.0, 0.0}, r4[3] = {0.5, 1.0, 0.0}, r5[3] = {0.5, -3.0, 0.0}, r6[3] = {4.0, 0.0, 0.0}, r7[3] = {98.5, 99.5, 0.0}, r8[3] = {100.0, 1.0, 0.0}, r9[3] = {220.5, 10.0, 0.0}, r10[3] = {0.4, 1.0, -1.0}, r11[3] = {0.4, -2.0, -1.0} , r12[3] = {0.4, 0.0, 2.0}, r13[3] = {0.5, 0.0, 0.0}, r14[3] = {0.1, 0.0, 0.0}, r15[3] = {0.5, -0.4, 0.0};
  Point<Real, 3> tp1(r1), tp2(r2), tp3(r3), tp4(r4), tp5(r5), tp6(r6), tp7(r7), tp8(r8), tp9(r9), tp10(r10), tp11(r11), tp12(r12), tp13(r13), tp14(r14), tp15(r15);
  Point<Real, 3> tripoints1[] = {tp1, tp2, tp3}, tripoints2[] = {tp4, tp5, tp6}, tripoints3[] = {tp7, tp8, tp9}, tripoints4[] = {tp10, tp11, tp12}, tripoints5[] = {tp13, tp14, tp15};
  Triangle<Real, 3> tri1(tripoints1), tri2(tripoints2), tri3(tripoints3), tri4(tripoints4), tri5(tripoints5);
  std::vector<Segment<Real, 3>> re1, re2, re3, re4;
  REQUIRE(tri1.intersect(tri2, re1) == Triangle<Real,3>::intsType::Overlap);
  REQUIRE(re1.size()==6);
  for(int i=0;i<re1.size();i++)
    std::cout<<re1[i]<<std::endl;
  REQUIRE(tri1.intersect(tri3, re2) == Triangle<Real,3>::intsType::Never);
  REQUIRE(re2.size()==0);
  REQUIRE(tri1.intersect(tri4, re3) == Triangle<Real,3>::intsType::IntsSeg);
  REQUIRE(re3.size()==1);
  REQUIRE(tri1.intersect(tri5, re4) == Triangle<Real,3>::intsType::Overlap);
  std::cout<<re4[0]<<std::endl;
  REQUIRE(re4.size()==3);
}
 
 
 
  
 
  
  
 
